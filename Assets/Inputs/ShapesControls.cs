//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Inputs/ShapesControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShapesControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShapesControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShapesControls"",
    ""maps"": [
        {
            ""name"": ""Shapes"",
            ""id"": ""97be8b17-c5ca-4f42-8e30-a45ed54c64e1"",
            ""actions"": [
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""291ec2f3-ce09-41a6-867c-47bea6961cd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""56574337-a8d2-4758-843c-d5253646ab29"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MainControlScheme"",
            ""bindingGroup"": ""MainControlScheme"",
            ""devices"": []
        }
    ]
}");
        // Shapes
        m_Shapes = asset.FindActionMap("Shapes", throwIfNotFound: true);
        m_Shapes_Place = m_Shapes.FindAction("Place", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shapes
    private readonly InputActionMap m_Shapes;
    private List<IShapesActions> m_ShapesActionsCallbackInterfaces = new List<IShapesActions>();
    private readonly InputAction m_Shapes_Place;
    public struct ShapesActions
    {
        private @ShapesControls m_Wrapper;
        public ShapesActions(@ShapesControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Place => m_Wrapper.m_Shapes_Place;
        public InputActionMap Get() { return m_Wrapper.m_Shapes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShapesActions set) { return set.Get(); }
        public void AddCallbacks(IShapesActions instance)
        {
            if (instance == null || m_Wrapper.m_ShapesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShapesActionsCallbackInterfaces.Add(instance);
            @Place.started += instance.OnPlace;
            @Place.performed += instance.OnPlace;
            @Place.canceled += instance.OnPlace;
        }

        private void UnregisterCallbacks(IShapesActions instance)
        {
            @Place.started -= instance.OnPlace;
            @Place.performed -= instance.OnPlace;
            @Place.canceled -= instance.OnPlace;
        }

        public void RemoveCallbacks(IShapesActions instance)
        {
            if (m_Wrapper.m_ShapesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShapesActions instance)
        {
            foreach (var item in m_Wrapper.m_ShapesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShapesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShapesActions @Shapes => new ShapesActions(this);
    private int m_MainControlSchemeSchemeIndex = -1;
    public InputControlScheme MainControlSchemeScheme
    {
        get
        {
            if (m_MainControlSchemeSchemeIndex == -1) m_MainControlSchemeSchemeIndex = asset.FindControlSchemeIndex("MainControlScheme");
            return asset.controlSchemes[m_MainControlSchemeSchemeIndex];
        }
    }
    public interface IShapesActions
    {
        void OnPlace(InputAction.CallbackContext context);
    }
}
