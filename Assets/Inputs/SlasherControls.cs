//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Inputs/SlasherControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SlasherControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SlasherControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SlasherControls"",
    ""maps"": [
        {
            ""name"": ""Slasher"",
            ""id"": ""ab515d33-d41d-4a4f-a485-940bb8123d01"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""58dabf21-18e0-4c22-a16d-68b06fbdfc02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc096db4-4242-4479-8ad4-d5250dd27a49"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Slasher
        m_Slasher = asset.FindActionMap("Slasher", throwIfNotFound: true);
        m_Slasher_Action = m_Slasher.FindAction("Action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Slasher
    private readonly InputActionMap m_Slasher;
    private List<ISlasherActions> m_SlasherActionsCallbackInterfaces = new List<ISlasherActions>();
    private readonly InputAction m_Slasher_Action;
    public struct SlasherActions
    {
        private @SlasherControls m_Wrapper;
        public SlasherActions(@SlasherControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_Slasher_Action;
        public InputActionMap Get() { return m_Wrapper.m_Slasher; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SlasherActions set) { return set.Get(); }
        public void AddCallbacks(ISlasherActions instance)
        {
            if (instance == null || m_Wrapper.m_SlasherActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SlasherActionsCallbackInterfaces.Add(instance);
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(ISlasherActions instance)
        {
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(ISlasherActions instance)
        {
            if (m_Wrapper.m_SlasherActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISlasherActions instance)
        {
            foreach (var item in m_Wrapper.m_SlasherActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SlasherActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SlasherActions @Slasher => new SlasherActions(this);
    public interface ISlasherActions
    {
        void OnAction(InputAction.CallbackContext context);
    }
}
